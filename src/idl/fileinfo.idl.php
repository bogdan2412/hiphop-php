<?php
/**
 * Automatically generated by running "php schema.php fileinfo".
 *
 * You may modify the file, but re-running schema.php against this file will
 * standardize the format without losing your schema changes. It does lose
 * any changes that are not part of schema. Use "note" field to comment on
 * schema itself, and "note" fields are not used in any code generation but
 * only staying within this file.
 *
 * @nolint
 */
///////////////////////////////////////////////////////////////////////////////
// Preamble: C++ code inserted at beginning of ext_{name}.h

DefinePreamble(<<<CPP
#include <magic.h>

namespace HPHP {
extern const int64 k_FILEINFO_NONE;
}

CPP
);

///////////////////////////////////////////////////////////////////////////////
// Constants
//
// array (
//   'name' => name of the constant
//   'type' => type of the constant
//   'note' => additional note about this constant's schema
// )

DefineConstant(
  array(
    'name'   => "FILEINFO_NONE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_SYMLINK",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_MIME_TYPE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_MIME_ENCODING",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_MIME",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_COMPRESS",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_DEVICES",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_CONTINUE",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_PRESERVE_ATIME",
    'type'   => Int64,
  ));

DefineConstant(
  array(
    'name'   => "FILEINFO_RAW",
    'type'   => Int64,
  ));


///////////////////////////////////////////////////////////////////////////////
// Functions
//
// array (
//   'name'   => name of the function
//   'desc'   => description of the function's purpose
//   'flags'  => attributes of the function, see base.php for possible values
//   'opt'    => optimization callback function's name for compiler
//   'note'   => additional note about this function's schema
//   'return' =>
//      array (
//        'type'  => return type, use Reference for ref return
//        'desc'  => description of the return value
//      )
//   'args'   => arguments
//      array (
//        'name'  => name of the argument
//        'type'  => type of the argument, use Reference for output parameter
//        'value' => default value of the argument
//        'desc'  => description of the argument
//      )
//   'taint_observer' => taint propagation information
//     array (
//       'set_mask' => which bits to set automatically
//       'clear_mask' => which bits to clear automatically
//     )
// )

DefineFunction(
  array(
    'name'   => "finfo_open",
    'desc'   => "This function opens a magic database and returns its resource.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns a magic database resource on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "options",
        'type'   => Int64,
        'value'  => "k_FILEINFO_NONE",
        'desc'   => "One or disjunction of more Fileinfo constants.",
      ),
      array(
        'name'   => "magic_file",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "Name of a magic database file, usually something like /path/to/magic.mime. If not specified, the MAGIC environment variable is used. If this variable is not set either, /usr/share/misc/magic is used by default. A .mime and/or .mgc suffix is added if needed.\nPassing NULL or an empty string will be equivalent to the default value.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "finfo_close",
    'desc'   => "This function closes the resource opened by finfo_open().",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "finfo",
        'type'   => Resource,
        'desc'   => "Fileinfo resource returned by finfo_open().",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "finfo_set_flags",
    'desc'   => "This function sets various Fileinfo options. Options can be set also directly in finfo_open() or other Fileinfo functions.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "finfo",
        'type'   => Resource,
        'desc'   => "Fileinfo resource returned by finfo_open().",
      ),
      array(
        'name'   => "options",
        'type'   => Int64,
        'desc'   => "One or disjunction of more Fileinfo constants.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "finfo_file",
    'desc'   => "This function is used to get information about a file.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns a textual description of the contents of the filename argument, or FALSE if an error occurred.",
    ),
    'args'   => array(
      array(
        'name'   => "finfo",
        'type'   => Resource,
        'desc'   => "Fileinfo resource returned by finfo_open().",
      ),
      array(
        'name'   => "file_name",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "Name of a file to be checked.",
      ),
      array(
        'name'   => "options",
        'type'   => Int64,
        'value'  => "k_FILEINFO_NONE",
        'desc'   => "One or disjunction of more Fileinfo constants.",
      ),
      array(
        'name'   => "context",
        'type'   => Resource,
        'value'  => "null_object",
        'desc'   => "For a description of contexts, refer to Stream Functions/",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "finfo_buffer",
    'desc'   => "This function is used to get information about a file.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns a textual description of the string argument, or FALSE if an error occurred.",
    ),
    'args'   => array(
      array(
        'name'   => "finfo",
        'type'   => Resource,
        'desc'   => "Fileinfo resource returned by finfo_open().",
      ),
      array(
        'name'   => "string",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "Content of a file to be checked.",
      ),
      array(
        'name'   => "options",
        'type'   => Int64,
        'value'  => "k_FILEINFO_NONE",
        'desc'   => "One or disjunction of more Fileinfo constants.",
      ),
      array(
        'name'   => "context",
        'type'   => Resource,
        'value'  => "null_object",
        'desc'   => "For a description of contexts, refer to Stream Functions/",
      ),
    ),
  ));


///////////////////////////////////////////////////////////////////////////////
// Classes
//
// BeginClass
// array (
//   'name'   => name of the class
//   'desc'   => description of the class's purpose
//   'flags'  => attributes of the class, see base.php for possible values
//   'note'   => additional note about this class's schema
//   'parent' => parent class name, if any
//   'ifaces' => array of interfaces tihs class implements
//   'bases'  => extra internal and special base classes this class requires
//   'footer' => extra C++ inserted at end of class declaration
// )
//
// DefineConstant(..)
// DefineConstant(..)
// ...
// DefineFunction(..)
// DefineFunction(..)
// ...
// DefineProperty
// DefineProperty
//
// array (
//   'name'  => name of the property
//   'type'  => type of the property
//   'flags' => attributes of the property
//   'desc'  => description of the property
//   'note'  => additional note about this property's schema
// )
//
// EndClass()

///////////////////////////////////////////////////////////////////////////////

BeginClass(
  array(
    'name'   => "finfo",
    'desc'   => "Object oriented variant of fileinfo methods",
    'flags'  =>  HasDocComment,
    'footer' => <<<EOT

  private:
    Variant m_res;
EOT
,
  ));

DefineFunction(
  array(
    'name'   => "__construct",
    'desc'   => "This function opens a magic database and returns its resource.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => null,
    ),
    'args'   => array(
      array(
        'name'   => "options",
        'type'   => Int64,
        'value'  => "k_FILEINFO_NONE",
        'desc'   => "One or disjunction of more Fileinfo constants.",
      ),
      array(
        'name'   => "magic_file",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "Name of a magic database file, usually something like /path/to/magic.mime. If not specified, the MAGIC environment variable is used. If this variable is not set either, /usr/share/misc/magic is used by default. A .mime and/or .mgc suffix is added if needed.\nPassing NULL or an empty string will be equivalent to the default value.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "__destruct",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
    ),
  ));

DefineFunction(
  array(
    'name'   => "set_flags",
    'desc'   => "This function sets various Fileinfo options. Options can be set also directly in finfo_open() or other Fileinfo functions.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Boolean,
      'desc'   => "Returns TRUE on success or FALSE on failure.",
    ),
    'args'   => array(
      array(
        'name'   => "options",
        'type'   => Int64,
        'desc'   => "One or disjunction of more Fileinfo constants.",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "file",
    'desc'   => "This function is used to get information about a file.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns a textual description of the contents of the filename argument, or FALSE if an error occurred.",
    ),
    'args'   => array(
      array(
        'name'   => "file_name",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "Name of a file to be checked.",
      ),
      array(
        'name'   => "options",
        'type'   => Int64,
        'value'  => "k_FILEINFO_NONE",
        'desc'   => "One or disjunction of more Fileinfo constants.",
      ),
      array(
        'name'   => "context",
        'type'   => Resource,
        'value'  => "null_object",
        'desc'   => "For a description of contexts, refer to Stream Functions/",
      ),
    ),
  ));

DefineFunction(
  array(
    'name'   => "buffer",
    'desc'   => "This function is used to get information about a file.",
    'flags'  =>  HasDocComment,
    'return' => array(
      'type'   => Variant,
      'desc'   => "Returns a textual description of the string argument, or FALSE if an error occurred.",
    ),
    'args'   => array(
      array(
        'name'   => "string",
        'type'   => String,
        'value'  => "null_string",
        'desc'   => "Content of a file to be checked.",
      ),
      array(
        'name'   => "options",
        'type'   => Int64,
        'value'  => "k_FILEINFO_NONE",
        'desc'   => "One or disjunction of more Fileinfo constants.",
      ),
      array(
        'name'   => "context",
        'type'   => Resource,
        'value'  => "null_object",
        'desc'   => "For a description of contexts, refer to Stream Functions/",
      ),
    ),
  ));

EndClass(
);

